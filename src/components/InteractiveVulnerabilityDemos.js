import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useTheme } from '../contexts/ThemeContext';
import { FiShield, FiAlertTriangle, FiExternalLink, FiServer } from 'react-icons/fi';

const vulnerabilityDemos = {
  csrf: {
    title: 'Cross-Site Request Forgery (CSRF)',
    icon: FiExternalLink,
    color: 'text-red-400',
    description: 'Trick users into performing unwanted actions on a web application where they are authenticated.',
    scenario: 'A malicious website tricks you into transferring money from your bank account.',
    demoSteps: [
      { step: 'User logs into their bank account', status: 'safe' },
      { step: 'User visits malicious website in another tab', status: 'warning' },
      { step: 'Malicious site sends hidden request to bank', status: 'danger' },
      { step: 'Bank processes request using stored cookies', status: 'danger' },
      { step: 'Money transferred without user knowledge', status: 'danger' }
    ],
    payload: `<form action="https://bank.com/transfer" method="POST" style="display:none;">
  <input name="to" value="attacker@evil.com">
  <input name="amount" value="1000">
</form>
<script>document.forms[0].submit();</script>`,
    mitigation: [
      'Use CSRF tokens in forms',
      'Implement SameSite cookie attributes',
      'Verify referrer headers',
      'Use double-submit cookies'
    ]
  },
  ssrf: {
    title: 'Server-Side Request Forgery (SSRF)',
    icon: FiServer,
    color: 'text-orange-400',
    description: 'Force a server to make requests to unintended locations, potentially accessing internal resources.',
    scenario: 'An image upload feature allows you to provide a URL, which the server fetches internally.',
    demoSteps: [
      { step: 'Application accepts URL for image processing', status: 'safe' },
      { step: 'Attacker provides internal network URL', status: 'warning' },
      { step: 'Server makes request to internal service', status: 'danger' },
      { step: 'Internal service responds (cloud metadata)', status: 'danger' },
      { step: 'Sensitive data leaked to attacker', status: 'danger' }
    ],
    payload: `POST /upload-image HTTP/1.1
Host: vulnerable-site.com
Content-Type: application/json

{
  "image_url": "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
}`,
    mitigation: [
      'Whitelist allowed domains/IPs',
      'Block private IP ranges',
      'Use separate network for external requests',
      'Validate and sanitize URLs'
    ]
  },
  idor: {
    title: 'Insecure Direct Object Reference (IDOR)',
    icon: FiShield,
    color: 'text-purple-400',
    description: 'Access objects by modifying user input without proper authorization checks.',
    scenario: 'Change user ID in URL to access other users\' private documents.',
    demoSteps: [
      { step: 'User accesses their profile: /user/123', status: 'safe' },
      { step: 'User changes ID in URL: /user/124', status: 'warning' },
      { step: 'Application serves user 124\'s data', status: 'danger' },
      { step: 'Sensitive information disclosed', status: 'danger' },
      { step: 'Attacker can enumerate all users', status: 'danger' }
    ],
    payload: `GET /api/user/124/documents HTTP/1.1
Host: vulnerable-site.com
Cookie: session=user123_session

Response:
{
  "documents": [
    {"name": "salary.pdf", "confidential": true},
    {"name": "medical_records.pdf", "private": true}
  ]
}`,
    mitigation: [
      'Implement proper access controls',
      'Use UUIDs instead of sequential IDs',
      'Validate user permissions',
      'Implement indirect object references'
    ]
  }
};

const InteractiveVulnerabilityDemos = () => {
  const [activeDemo, setActiveDemo] = useState('csrf');
  const [currentStep, setCurrentStep] = useState(0);
  const { isDarkMode } = useTheme();

  const demo = vulnerabilityDemos[activeDemo];
  const IconComponent = demo.icon;

  const nextStep = () => {
    setCurrentStep((prev) => (prev + 1) % demo.demoSteps.length);
  };

  const resetDemo = () => {
    setCurrentStep(0);
  };

  const getStepColor = (status) => {
    switch (status) {
      case 'safe': return 'text-green-400 bg-green-900/20';
      case 'warning': return 'text-yellow-400 bg-yellow-900/20';
      case 'danger': return 'text-red-400 bg-red-900/20';
      default: return 'text-gray-400 bg-gray-800/20';
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={`mt-6 p-6 rounded-lg shadow-lg ${
        isDarkMode 
          ? 'bg-gray-800 bg-opacity-50 border border-gray-700' 
          : 'bg-white bg-opacity-80 border border-gray-200'
      }`}
    >
      <h3 className="text-xl font-bold mb-4 flex items-center">
        <FiAlertTriangle className="mr-2 text-yellow-400" />
        Interactive Vulnerability Demos
      </h3>

      {/* Vulnerability Selector */}
      <div className="flex space-x-2 mb-6 border-b border-gray-700 overflow-x-auto">
        {Object.entries(vulnerabilityDemos).map(([key, vuln]) => (
          <button
            key={key}
            onClick={() => {
              setActiveDemo(key);
              setCurrentStep(0);
            }}
            className={`px-4 py-2 text-sm font-medium transition-colors whitespace-nowrap ${
              activeDemo === key 
                ? 'border-b-2 border-yellow-500 text-white' 
                : 'text-gray-400 hover:text-white'
            }`}
          >
            {vuln.title.split(' ')[0]}
          </button>
        ))}
      </div>

      {/* Demo Content */}
      <div className="grid lg:grid-cols-2 gap-6">
        {/* Left Column - Description and Steps */}
        <div>
          <div className="mb-4">
            <div className="flex items-center mb-2">
              <IconComponent className={`mr-2 ${demo.color}`} />
              <h4 className="text-lg font-semibold">{demo.title}</h4>
            </div>
            <p className="text-sm text-gray-300 mb-2">{demo.description}</p>
            <p className="text-xs text-gray-400 italic">{demo.scenario}</p>
          </div>

          {/* Interactive Steps */}
          <div className="space-y-2">
            <h5 className="font-medium text-sm">Attack Flow:</h5>
            {demo.demoSteps.map((step, index) => (
              <div
                key={index}
                className={`p-3 rounded-lg text-sm transition-all ${
                  index <= currentStep 
                    ? getStepColor(step.status)
                    : 'text-gray-600 bg-gray-800/10'
                }`}
              >
                <span className="font-mono text-xs mr-2">{index + 1}.</span>
                {step.step}
              </div>
            ))}
          </div>

          {/* Demo Controls */}
          <div className="flex space-x-2 mt-4">
            <button
              onClick={nextStep}
              className="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 rounded-lg text-sm"
            >
              Next Step
            </button>
            <button
              onClick={resetDemo}
              className="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg text-sm"
            >
              Reset
            </button>
          </div>
        </div>

        {/* Right Column - Technical Details */}
        <div>
          {/* Payload Example */}
          <div className="mb-4">
            <h5 className="font-medium text-sm mb-2">Example Payload:</h5>
            <div className={`p-4 rounded-lg font-mono text-xs text-gray-300 ${
              isDarkMode ? 'bg-gray-900' : 'bg-gray-200'
            }`}>
              <pre className="whitespace-pre-wrap overflow-x-auto">{demo.payload}</pre>
            </div>
          </div>

          {/* Mitigation Strategies */}
          <div>
            <h5 className="font-medium text-sm mb-2">Mitigation Strategies:</h5>
            <ul className="space-y-1">
              {demo.mitigation.map((item, index) => (
                <li key={index} className="flex items-start text-sm">
                  <div className="w-2 h-2 bg-green-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span className="text-gray-300">{item}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>

      {/* Educational Note */}
      <div className="mt-6 p-3 bg-blue-900/20 border border-blue-700/50 rounded-lg">
        <p className="text-xs text-blue-300">
          <strong>Educational Purpose:</strong> These demos illustrate common vulnerabilities for learning. 
          Always ensure you have proper authorization before testing on any systems.
        </p>
      </div>
    </motion.div>
  );
};

export default InteractiveVulnerabilityDemos;
