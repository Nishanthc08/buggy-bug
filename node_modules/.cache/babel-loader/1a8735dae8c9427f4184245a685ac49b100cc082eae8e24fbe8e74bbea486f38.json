{"ast":null,"code":"var _jsxFileName = \"/home/boss/BugBounty/BuggyBug/src/data/interactiveTutorialsData.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const reflectedXssTutorial = {\n  id: 'reflected-xss-1',\n  title: 'Introduction to Reflected XSS',\n  description: 'Learn how to find and exploit a basic Reflected Cross-Site Scripting (XSS) vulnerability.',\n  steps: [{\n    id: 1,\n    title: 'The Scenario',\n    content: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are testing a simple web application with a search feature. The search term is reflected on the page.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your goal is to see if you can inject a script that will be executed by the browser.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this),\n    code: `\n// Vulnerable search page component\nfunction SearchPage({ searchTerm }) {\n  return (\n    <div>\n      <h1>Search Results</h1>\n      <p>You searched for: {searchTerm}</p>\n    </div>\n  );\n}\n      `\n  }, {\n    id: 2,\n    title: 'Testing for a Reflection',\n    content: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"First, let's see if the search term is reflected without any sanitization. We can try a simple, non-malicious HTML tag.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"If the word \\\"test\\\" appears in bold, it means the application is rendering raw HTML.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this),\n    task: 'Enter a simple HTML tag to test for reflection.',\n    expectedInput: '<b>test</b>',\n    successMessage: 'Great! The tag was rendered, which means the input is not being sanitized. This is a strong indicator of an XSS vulnerability.',\n    failureMessage: 'Not quite. Try injecting a simple HTML tag like \\`<b>test</b>\\` to see if it gets rendered as bold text.'\n  }, {\n    id: 3,\n    title: 'Injecting a Simple Script',\n    content: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Now that we know the application is vulnerable to HTML injection, let's try to inject a simple script. The classic alert() function is a great way to confirm an XSS vulnerability.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this),\n    task: 'Inject a script that will pop up an alert box.',\n    expectedInput: '<script>alert(\"XSS\")</script>',\n    successMessage: 'Excellent! You\\'ve successfully executed a script. This is a confirmed Reflected XSS vulnerability.',\n    failureMessage: 'That\\'s not the right payload. Try a standard XSS payload like \\`<script>alert(\"XSS\")</script>\\`.'\n  }, {\n    id: 4,\n    title: 'Understanding the Impact',\n    content: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"What's the big deal? An attacker could use this vulnerability to:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc list-inside mt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Steal cookies and session tokens.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Redirect users to malicious websites.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Capture keystrokes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Display fake login forms.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 5,\n    title: 'Next Steps',\n    content: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Congratulations on finding your first (simulated) Reflected XSS vulnerability! Now you understand the basics of how they work and how to test for them.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }]\n};","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","reflectedXssTutorial","id","title","description","steps","content","children","fileName","_jsxFileName","lineNumber","columnNumber","code","task","expectedInput","successMessage","failureMessage","className"],"sources":["/home/boss/BugBounty/BuggyBug/src/data/interactiveTutorialsData.js"],"sourcesContent":["\nimport React from 'react';\n\nexport const reflectedXssTutorial = {\n  id: 'reflected-xss-1',\n  title: 'Introduction to Reflected XSS',\n  description: 'Learn how to find and exploit a basic Reflected Cross-Site Scripting (XSS) vulnerability.',\n  steps: [\n    {\n      id: 1,\n      title: 'The Scenario',\n      content: (\n        <div>\n          <p>You are testing a simple web application with a search feature. The search term is reflected on the page.</p>\n          <p>Your goal is to see if you can inject a script that will be executed by the browser.</p>\n        </div>\n      ),\n      code: `\n// Vulnerable search page component\nfunction SearchPage({ searchTerm }) {\n  return (\n    <div>\n      <h1>Search Results</h1>\n      <p>You searched for: {searchTerm}</p>\n    </div>\n  );\n}\n      `,\n    },\n    {\n      id: 2,\n      title: 'Testing for a Reflection',\n      content: (\n        <div>\n          <p>First, let's see if the search term is reflected without any sanitization. We can try a simple, non-malicious HTML tag.</p>\n          <p>If the word \"test\" appears in bold, it means the application is rendering raw HTML.</p>\n        </div>\n      ),\n      task: 'Enter a simple HTML tag to test for reflection.',\n      expectedInput: '<b>test</b>',\n      successMessage: 'Great! The tag was rendered, which means the input is not being sanitized. This is a strong indicator of an XSS vulnerability.',\n      failureMessage: 'Not quite. Try injecting a simple HTML tag like \\`<b>test</b>\\` to see if it gets rendered as bold text.',\n    },\n    {\n      id: 3,\n      title: 'Injecting a Simple Script',\n      content: (\n        <p>Now that we know the application is vulnerable to HTML injection, let's try to inject a simple script. The classic alert() function is a great way to confirm an XSS vulnerability.</p>\n      ),\n      task: 'Inject a script that will pop up an alert box.',\n      expectedInput: '<script>alert(\"XSS\")</script>',\n      successMessage: 'Excellent! You\\'ve successfully executed a script. This is a confirmed Reflected XSS vulnerability.',\n      failureMessage: 'That\\'s not the right payload. Try a standard XSS payload like \\`<script>alert(\"XSS\")</script>\\`.',\n    },\n    {\n      id: 4,\n      title: 'Understanding the Impact',\n      content: (\n        <div>\n          <p>What's the big deal? An attacker could use this vulnerability to:</p>\n          <ul className=\"list-disc list-inside mt-2\">\n            <li>Steal cookies and session tokens.</li>\n            <li>Redirect users to malicious websites.</li>\n            <li>Capture keystrokes.</li>\n            <li>Display fake login forms.</li>\n          </ul>\n        </div>\n      ),\n    },\n    {\n      id: 5,\n      title: 'Next Steps',\n      content: (\n        <p>Congratulations on finding your first (simulated) Reflected XSS vulnerability! Now you understand the basics of how they work and how to test for them.</p>\n      ),\n    },\n  ],\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}